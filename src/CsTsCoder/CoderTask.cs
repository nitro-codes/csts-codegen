using CsTsCoder;
using System;
using System.Collections.Generic;
using System.IO;
using Microsoft.Build.Framework;
using Microsoft.Build.Utilities;
using System.Text.RegularExpressions;
using CsTsCoder.Shared.Enums;

namespace CsTsCoder
{
    public class CoderTask : Task
    {
        /// <summary>
        /// The current working directory for the convert process
        /// </summary>
        public string InputDirectory { get; set; }

        /// <summary>
        /// The directory to save the ts models
        /// </summary>
        public string OutputDirectory { get; set; }

        /// <summary>
        /// Determines the naming style of the generated files and folders
        /// </summary>
        public string PathStyle
        {
            get => _pathStyle.ToString();
            set => _pathStyle = (PathStyle)Enum.Parse(typeof(PathStyle), value);
        }

        /// <summary>
        /// Comments at the top of each file that it was auto generated
        /// </summary>
        public bool AutoGeneratedTag { get; set; } = true; //default value if one is not provided;

        
        /// <summary>
        /// Determines whether to generate numeric or string values in typescript enums
        /// </summary>
        public string EnumValues
        {
            get => _enumValues.ToString();
            set => _enumValues = (EnumValue)Enum.Parse(typeof(EnumValue), value);
        }

        protected MessageImportance LoggingImportance { get; } = MessageImportance.High;  //If its not high then there are no logs

        private readonly CoderService codeGenService;

        private EnumValue _enumValues = EnumValue.Default;
        
        private PathStyle _pathStyle = CsTsCoder.Shared.Enums.PathStyle.Default;

        public CoderTask()
        {
            codeGenService = new CoderService(Log.LogMessage);
        }

        public override bool Execute()
        {
            Log.LogMessage(LoggingImportance, "CsTsCoder: Code generation starting...");

            codeGenService.AutoGeneratedTag = AutoGeneratedTag;
            codeGenService.OutputDirectory = OutputDirectory;
            codeGenService.InputDirectory = InputDirectory;
            codeGenService.EnumValues = _enumValues;
            codeGenService.PathStyle = _pathStyle;

            var result = codeGenService.Execute();

            Log.LogMessage(LoggingImportance, "CsTsCoder: All set! Code generation finished.");
            return result;
        }
    }
}
